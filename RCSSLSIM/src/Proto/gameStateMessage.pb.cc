// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gameStateMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GameStateMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameStateMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_gameStateMessage_2eproto() {
  protobuf_AddDesc_gameStateMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gameStateMessage.proto");
  GOOGLE_CHECK(file != NULL);
  GameStateMessage_descriptor_ = file->message_type(0);
  static const int GameStateMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStateMessage, fieldstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStateMessage, gamemode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStateMessage, strategy_),
  };
  GameStateMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameStateMessage_descriptor_,
      GameStateMessage::default_instance_,
      GameStateMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStateMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStateMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameStateMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gameStateMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameStateMessage_descriptor_, &GameStateMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gameStateMessage_2eproto() {
  delete GameStateMessage::default_instance_;
  delete GameStateMessage_reflection_;
}

void protobuf_AddDesc_gameStateMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_fieldStateMessage_2eproto();
  ::protobuf_AddDesc_strategyMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026gameStateMessage.proto\032\027fieldStateMess"
    "age.proto\032\025strategyMessage.proto\"p\n\020Game"
    "StateMessage\022&\n\nfieldState\030\001 \001(\0132\022.Field"
    "StateMessage\022\020\n\010GameMode\030\002 \001(\t\022\"\n\010strate"
    "gy\030\003 \001(\0132\020.StrategyMessage", 186);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gameStateMessage.proto", &protobuf_RegisterTypes);
  GameStateMessage::default_instance_ = new GameStateMessage();
  GameStateMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gameStateMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gameStateMessage_2eproto {
  StaticDescriptorInitializer_gameStateMessage_2eproto() {
    protobuf_AddDesc_gameStateMessage_2eproto();
  }
} static_descriptor_initializer_gameStateMessage_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int GameStateMessage::kFieldStateFieldNumber;
const int GameStateMessage::kGameModeFieldNumber;
const int GameStateMessage::kStrategyFieldNumber;
#endif  // !_MSC_VER

GameStateMessage::GameStateMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameStateMessage::InitAsDefaultInstance() {
  fieldstate_ = const_cast< ::FieldStateMessage*>(&::FieldStateMessage::default_instance());
  strategy_ = const_cast< ::StrategyMessage*>(&::StrategyMessage::default_instance());
}

GameStateMessage::GameStateMessage(const GameStateMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameStateMessage::SharedCtor() {
  _cached_size_ = 0;
  fieldstate_ = NULL;
  gamemode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strategy_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameStateMessage::~GameStateMessage() {
  SharedDtor();
}

void GameStateMessage::SharedDtor() {
  if (gamemode_ != &::google::protobuf::internal::kEmptyString) {
    delete gamemode_;
  }
  if (this != default_instance_) {
    delete fieldstate_;
    delete strategy_;
  }
}

void GameStateMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameStateMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameStateMessage_descriptor_;
}

const GameStateMessage& GameStateMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameStateMessage_2eproto();  return *default_instance_;
}

GameStateMessage* GameStateMessage::default_instance_ = NULL;

GameStateMessage* GameStateMessage::New() const {
  return new GameStateMessage;
}

void GameStateMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fieldstate()) {
      if (fieldstate_ != NULL) fieldstate_->::FieldStateMessage::Clear();
    }
    if (has_gamemode()) {
      if (gamemode_ != &::google::protobuf::internal::kEmptyString) {
        gamemode_->clear();
      }
    }
    if (has_strategy()) {
      if (strategy_ != NULL) strategy_->::StrategyMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameStateMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .FieldStateMessage fieldState = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fieldstate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_GameMode;
        break;
      }
      
      // optional string GameMode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GameMode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamemode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gamemode().data(), this->gamemode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_strategy;
        break;
      }
      
      // optional .StrategyMessage strategy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strategy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_strategy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameStateMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .FieldStateMessage fieldState = 1;
  if (has_fieldstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fieldstate(), output);
  }
  
  // optional string GameMode = 2;
  if (has_gamemode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gamemode().data(), this->gamemode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->gamemode(), output);
  }
  
  // optional .StrategyMessage strategy = 3;
  if (has_strategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->strategy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameStateMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FieldStateMessage fieldState = 1;
  if (has_fieldstate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fieldstate(), target);
  }
  
  // optional string GameMode = 2;
  if (has_gamemode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gamemode().data(), this->gamemode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gamemode(), target);
  }
  
  // optional .StrategyMessage strategy = 3;
  if (has_strategy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->strategy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameStateMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FieldStateMessage fieldState = 1;
    if (has_fieldstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fieldstate());
    }
    
    // optional string GameMode = 2;
    if (has_gamemode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gamemode());
    }
    
    // optional .StrategyMessage strategy = 3;
    if (has_strategy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->strategy());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameStateMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameStateMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameStateMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameStateMessage::MergeFrom(const GameStateMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fieldstate()) {
      mutable_fieldstate()->::FieldStateMessage::MergeFrom(from.fieldstate());
    }
    if (from.has_gamemode()) {
      set_gamemode(from.gamemode());
    }
    if (from.has_strategy()) {
      mutable_strategy()->::StrategyMessage::MergeFrom(from.strategy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameStateMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameStateMessage::CopyFrom(const GameStateMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStateMessage::IsInitialized() const {
  
  return true;
}

void GameStateMessage::Swap(GameStateMessage* other) {
  if (other != this) {
    std::swap(fieldstate_, other->fieldstate_);
    std::swap(gamemode_, other->gamemode_);
    std::swap(strategy_, other->strategy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameStateMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameStateMessage_descriptor_;
  metadata.reflection = GameStateMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
