// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gameStateMessage.proto

#ifndef PROTOBUF_gameStateMessage_2eproto__INCLUDED
#define PROTOBUF_gameStateMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "fieldStateMessage.pb.h"
#include "strategyMessage.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_gameStateMessage_2eproto();
void protobuf_AssignDesc_gameStateMessage_2eproto();
void protobuf_ShutdownFile_gameStateMessage_2eproto();

class GameStateMessage;

// ===================================================================

class GameStateMessage : public ::google::protobuf::Message {
 public:
  GameStateMessage();
  virtual ~GameStateMessage();
  
  GameStateMessage(const GameStateMessage& from);
  
  inline GameStateMessage& operator=(const GameStateMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameStateMessage& default_instance();
  
  void Swap(GameStateMessage* other);
  
  // implements Message ----------------------------------------------
  
  GameStateMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameStateMessage& from);
  void MergeFrom(const GameStateMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FieldStateMessage fieldState = 1;
  inline bool has_fieldstate() const;
  inline void clear_fieldstate();
  static const int kFieldStateFieldNumber = 1;
  inline const ::FieldStateMessage& fieldstate() const;
  inline ::FieldStateMessage* mutable_fieldstate();
  inline ::FieldStateMessage* release_fieldstate();
  
  // optional string GameMode = 2;
  inline bool has_gamemode() const;
  inline void clear_gamemode();
  static const int kGameModeFieldNumber = 2;
  inline const ::std::string& gamemode() const;
  inline void set_gamemode(const ::std::string& value);
  inline void set_gamemode(const char* value);
  inline void set_gamemode(const char* value, size_t size);
  inline ::std::string* mutable_gamemode();
  inline ::std::string* release_gamemode();
  
  // optional .StrategyMessage strategy = 3;
  inline bool has_strategy() const;
  inline void clear_strategy();
  static const int kStrategyFieldNumber = 3;
  inline const ::StrategyMessage& strategy() const;
  inline ::StrategyMessage* mutable_strategy();
  inline ::StrategyMessage* release_strategy();
  
  // @@protoc_insertion_point(class_scope:GameStateMessage)
 private:
  inline void set_has_fieldstate();
  inline void clear_has_fieldstate();
  inline void set_has_gamemode();
  inline void clear_has_gamemode();
  inline void set_has_strategy();
  inline void clear_has_strategy();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::FieldStateMessage* fieldstate_;
  ::std::string* gamemode_;
  ::StrategyMessage* strategy_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_gameStateMessage_2eproto();
  friend void protobuf_AssignDesc_gameStateMessage_2eproto();
  friend void protobuf_ShutdownFile_gameStateMessage_2eproto();
  
  void InitAsDefaultInstance();
  static GameStateMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// GameStateMessage

// optional .FieldStateMessage fieldState = 1;
inline bool GameStateMessage::has_fieldstate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameStateMessage::set_has_fieldstate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameStateMessage::clear_has_fieldstate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameStateMessage::clear_fieldstate() {
  if (fieldstate_ != NULL) fieldstate_->::FieldStateMessage::Clear();
  clear_has_fieldstate();
}
inline const ::FieldStateMessage& GameStateMessage::fieldstate() const {
  return fieldstate_ != NULL ? *fieldstate_ : *default_instance_->fieldstate_;
}
inline ::FieldStateMessage* GameStateMessage::mutable_fieldstate() {
  set_has_fieldstate();
  if (fieldstate_ == NULL) fieldstate_ = new ::FieldStateMessage;
  return fieldstate_;
}
inline ::FieldStateMessage* GameStateMessage::release_fieldstate() {
  clear_has_fieldstate();
  ::FieldStateMessage* temp = fieldstate_;
  fieldstate_ = NULL;
  return temp;
}

// optional string GameMode = 2;
inline bool GameStateMessage::has_gamemode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameStateMessage::set_has_gamemode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameStateMessage::clear_has_gamemode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameStateMessage::clear_gamemode() {
  if (gamemode_ != &::google::protobuf::internal::kEmptyString) {
    gamemode_->clear();
  }
  clear_has_gamemode();
}
inline const ::std::string& GameStateMessage::gamemode() const {
  return *gamemode_;
}
inline void GameStateMessage::set_gamemode(const ::std::string& value) {
  set_has_gamemode();
  if (gamemode_ == &::google::protobuf::internal::kEmptyString) {
    gamemode_ = new ::std::string;
  }
  gamemode_->assign(value);
}
inline void GameStateMessage::set_gamemode(const char* value) {
  set_has_gamemode();
  if (gamemode_ == &::google::protobuf::internal::kEmptyString) {
    gamemode_ = new ::std::string;
  }
  gamemode_->assign(value);
}
inline void GameStateMessage::set_gamemode(const char* value, size_t size) {
  set_has_gamemode();
  if (gamemode_ == &::google::protobuf::internal::kEmptyString) {
    gamemode_ = new ::std::string;
  }
  gamemode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GameStateMessage::mutable_gamemode() {
  set_has_gamemode();
  if (gamemode_ == &::google::protobuf::internal::kEmptyString) {
    gamemode_ = new ::std::string;
  }
  return gamemode_;
}
inline ::std::string* GameStateMessage::release_gamemode() {
  clear_has_gamemode();
  if (gamemode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gamemode_;
    gamemode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .StrategyMessage strategy = 3;
inline bool GameStateMessage::has_strategy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameStateMessage::set_has_strategy() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameStateMessage::clear_has_strategy() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameStateMessage::clear_strategy() {
  if (strategy_ != NULL) strategy_->::StrategyMessage::Clear();
  clear_has_strategy();
}
inline const ::StrategyMessage& GameStateMessage::strategy() const {
  return strategy_ != NULL ? *strategy_ : *default_instance_->strategy_;
}
inline ::StrategyMessage* GameStateMessage::mutable_strategy() {
  set_has_strategy();
  if (strategy_ == NULL) strategy_ = new ::StrategyMessage;
  return strategy_;
}
inline ::StrategyMessage* GameStateMessage::release_strategy() {
  clear_has_strategy();
  ::StrategyMessage* temp = strategy_;
  strategy_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_gameStateMessage_2eproto__INCLUDED
