// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ball.proto

#ifndef PROTOBUF_ball_2eproto__INCLUDED
#define PROTOBUF_ball_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "vector3D.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ball_2eproto();
void protobuf_AssignDesc_ball_2eproto();
void protobuf_ShutdownFile_ball_2eproto();

class Ball;

// ===================================================================

class Ball : public ::google::protobuf::Message {
 public:
  Ball();
  virtual ~Ball();
  
  Ball(const Ball& from);
  
  inline Ball& operator=(const Ball& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ball& default_instance();
  
  void Swap(Ball* other);
  
  // implements Message ----------------------------------------------
  
  Ball* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ball& from);
  void MergeFrom(const Ball& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .Vector3D position = 1;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 1;
  inline const ::Vector3D& position() const;
  inline ::Vector3D* mutable_position();
  inline ::Vector3D* release_position();
  
  // optional .Vector3D velocity = 2;
  inline bool has_velocity() const;
  inline void clear_velocity();
  static const int kVelocityFieldNumber = 2;
  inline const ::Vector3D& velocity() const;
  inline ::Vector3D* mutable_velocity();
  inline ::Vector3D* release_velocity();
  
  // @@protoc_insertion_point(class_scope:Ball)
 private:
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_velocity();
  inline void clear_has_velocity();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::Vector3D* position_;
  ::Vector3D* velocity_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ball_2eproto();
  friend void protobuf_AssignDesc_ball_2eproto();
  friend void protobuf_ShutdownFile_ball_2eproto();
  
  void InitAsDefaultInstance();
  static Ball* default_instance_;
};
// ===================================================================


// ===================================================================

// Ball

// optional .Vector3D position = 1;
inline bool Ball::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ball::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ball::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ball::clear_position() {
  if (position_ != NULL) position_->::Vector3D::Clear();
  clear_has_position();
}
inline const ::Vector3D& Ball::position() const {
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::Vector3D* Ball::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::Vector3D;
  return position_;
}
inline ::Vector3D* Ball::release_position() {
  clear_has_position();
  ::Vector3D* temp = position_;
  position_ = NULL;
  return temp;
}

// optional .Vector3D velocity = 2;
inline bool Ball::has_velocity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ball::set_has_velocity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ball::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ball::clear_velocity() {
  if (velocity_ != NULL) velocity_->::Vector3D::Clear();
  clear_has_velocity();
}
inline const ::Vector3D& Ball::velocity() const {
  return velocity_ != NULL ? *velocity_ : *default_instance_->velocity_;
}
inline ::Vector3D* Ball::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) velocity_ = new ::Vector3D;
  return velocity_;
}
inline ::Vector3D* Ball::release_velocity() {
  clear_has_velocity();
  ::Vector3D* temp = velocity_;
  velocity_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ball_2eproto__INCLUDED
